
@HVLayout
scchart DDDPacemaker {
  input signal VSense, ASense;
  input signal LRI_TO, URI_TO, PVARP_TO, VRP_TO, AVI_TO, AEI_TO;
  output signal VPace, APace;

  initial state top {
    signal LRI_start, LRI_stop, LRI_ex;
    signal URI_start, URI_stop, URI_ex;
    signal PVARP_start, PVARP_stop, PVARP_ex;
    signal VRP_start, VRP_stop, VRP_ex;
    signal AVI_start, AVI_stop, AVI_ex;
    signal AEI_start, AEI_stop, AEI_ex;
 	bool AR = false;
    bool VR = false;
    bool idleURI = true; // checks if URI is active, so AVI can move over if it is

    region LRI:

    initial state init
    --> commit1 with VSense || VPace;

    connector state commit1
    --> waitVRP immediate with / LRI_start;

    state waitVRP
    --> waitLRI with VRP_ex;

    state waitLRI "waitLRI"
    --> commit2 with (VSense || VPace)
    --> commit3 with LRI_ex;

    connector state commit2
    --> intState immediate with / LRI_stop; //connector state commit3 --> commit1 immediate with /VPace;
    connector state commit3
    --> intState immediate with / VPace;

    state intState
    --> waitVRP with / LRI_start;

    region LRI_timer:

    initial state idle
    --> timer with LRI_start;

    state timer "timer"
    --> idle with LRI_stop
    --> idle with LRI_TO / LRI_ex; 

	// making URI kinda exactly like VRP - are they effectively the same? cept higher prio
    region URI:

    initial state idle
    --> commit1 with VSense / idleURI = false
    --> commit1 with VPace / idleURI = false;

    connector state commit1
    --> waitURI immediate with / URI_start;

    state waitURI
    --> idle with URI_ex / idleURI = true
    --> waitURI with VPace
    --> waitURI with VSense; //connector state comit2 --> waitVRP immediate;
    // stays in VRP waiting, even if VS detected (becomes VR signal)

    region URI_timer:

    initial state idle
    --> timer with URI_start;

    state timer "timer"
    --> idle with URI_TO / URI_ex;

    region VRP:

    initial state idle
    --> commit1 with VSense
    --> commit1 with VPace;

    connector state commit1
    --> waitVRP immediate with / VRP_start;

    state waitVRP
    --> idle with VRP_ex / VR = false //--> comit2 with VSense;
    --> waitVRP with VSense / VR = true; //connector state comit2 --> waitVRP immediate;
    // stays in VRP waiting, even if VS detected (becomes VR signal)


    region VRP_timer: // VRP has no 'stop' because it is a static time period where VS/VP are ignored


    initial state idle
    --> timer with VRP_start;

    state timer "timer"
    --> idle with VRP_TO / VRP_ex;

    region PVARP:

    initial state idle
    --> commit1 with VSense
    --> commit1 with VPace;

    connector state commit1
    --> waitPVARP immediate with / PVARP_start;

    state waitPVARP
    --> idle with PVARP_ex / AR = false
    --> waitPVARP with ASense / AR = true; // bool high 
    // stays in PVARP waiting, even if AS detected (becomes AR signal)


    region PVARP_timer: // PVARP has no 'stop' because it is a static time period where AS/AP are ignored


    initial state idle
    --> timer with PVARP_start;

    state timer "timer"
    --> idle with PVARP_TO / PVARP_ex;
    
    
    region AVI:

    initial state init
    --> commit1 with (ASense && !AR);

    connector state commit1
    --> waitAVI immediate with / AVI_start;

    state waitAVI "waitAVI"
    --> commit2 with VSense && !VR // if timeout has not occurred, block Asense signals
    --> commit3 with AVI_ex;
	
	connector state commit2
	--> intState immediate with /AVI_stop;
    connector state commit3
    --> intState immediate with / VPace;

    state intState
    --> waitAVI with !AR && (ASense || APace) / AVI_start;

    region AVI_timer:

    initial state idle
    --> timer with AVI_start;

    state timer "timer"
    --> idle with AVI_stop
    --> idle with (AVI_TO) / AVI_ex; 
    // only assert VPace if URI is idle, or else listen to when URI wants it!
    // tried to make it (AVI_TO && idleURI = true) but made
    // the whole thing non deterministic.... maybe just import to C first
    region AEI:

    initial state init
    --> commit1 with (VSense && !VR);

    connector state commit1
    --> waitAEI immediate with / AEI_start;

    state waitAEI "waitAEI"
    --> commit2 with ASense && !AR // if timeout has not occurred, block Asense signals
    --> commit3 with AEI_ex;
	
	connector state commit2
	--> intState immediate with /AEI_stop;
    connector state commit3
    --> intState immediate with / APace;

    state intState
    --> waitAEI with !VR && (VSense || VPace) / AEI_start; // to ignore deassertion of PVARP when 

    region AEI_timer:

    initial state idle
    --> timer with AEI_start;

    state timer "timer"
    --> idle with AEI_stop
    --> idle with AEI_TO / AEI_ex; 
    
  };
}
